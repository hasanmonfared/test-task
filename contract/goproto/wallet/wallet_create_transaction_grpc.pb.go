// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: contract/protobuf/wallet/wallet_create_transaction.proto

package wallet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CreateTransactionServiceClient is the client API for CreateTransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreateTransactionServiceClient interface {
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error)
}

type createTransactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCreateTransactionServiceClient(cc grpc.ClientConnInterface) CreateTransactionServiceClient {
	return &createTransactionServiceClient{cc}
}

func (c *createTransactionServiceClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error) {
	out := new(CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/wallet.CreateTransactionService/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreateTransactionServiceServer is the server API for CreateTransactionService service.
// All implementations must embed UnimplementedCreateTransactionServiceServer
// for forward compatibility
type CreateTransactionServiceServer interface {
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error)
	mustEmbedUnimplementedCreateTransactionServiceServer()
}

// UnimplementedCreateTransactionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCreateTransactionServiceServer struct {
}

func (UnimplementedCreateTransactionServiceServer) CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedCreateTransactionServiceServer) mustEmbedUnimplementedCreateTransactionServiceServer() {
}

// UnsafeCreateTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreateTransactionServiceServer will
// result in compilation errors.
type UnsafeCreateTransactionServiceServer interface {
	mustEmbedUnimplementedCreateTransactionServiceServer()
}

func RegisterCreateTransactionServiceServer(s grpc.ServiceRegistrar, srv CreateTransactionServiceServer) {
	s.RegisterService(&CreateTransactionService_ServiceDesc, srv)
}

func _CreateTransactionService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreateTransactionServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.CreateTransactionService/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreateTransactionServiceServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CreateTransactionService_ServiceDesc is the grpc.ServiceDesc for CreateTransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreateTransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wallet.CreateTransactionService",
	HandlerType: (*CreateTransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransaction",
			Handler:    _CreateTransactionService_CreateTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contract/protobuf/wallet/wallet_create_transaction.proto",
}
